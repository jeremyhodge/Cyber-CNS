let
    CyberCNS.Schemas.Reference.Generic = type [
        id = text,
        name = text
    ],

     CyberCNS.Schemas.Reference.SimpleRef = type [
        id = text
     ],

    CyberCNS.Schemas.Reference.Rule = type [
        sectionId = text,
        alertId = text,
        eventId = text
    ],

    CyberCNS.Schemas.Alert = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        description = text,
        status = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        attributes = list
    ],

    CyberCNS.Schemas.IntegrationMap = type [
        ticketId = text,
        integrationName = text,
        ticketStatus = logical,
        integrationId = text
    ],

    CyberCNS.Schemas.EventHistory = type [
        event_time = datetime,
        description = text
    ],

    CyberCNS.Schemas.Event = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        description = text,
        status = text,
        notificationBody = text,
        integrationMap = CyberCNS.Schemas.IntegrationMap,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        ruleReference = CyberCNS.Schemas.Reference.Rule,
        eventHistory = { CyberCNS.Schemas.EventHistory }
    ],

    CyberCNS.Schemas.IdentityProvider.Config.Schema = type [
        #"type" = text
    ],

    CyberCNS.Schemas.IdentityProvider.Config = type [
        name = text,
        key = text,
        description = text,
        required = logical,
        display = logical,
        schema = CyberCNS.Schemas.IdentityProvider.Config.Schema
    ],

    CyberCNS.Schemas.IdentityProvider.Parameters = type [
        alias = text,
        providerId = text
    ],

    CyberCNS.Schemas.IdentityProvider = type table [
        name = text,
        image = text,
        config = { CyberCNS.Schemas.IdentityProvider.Config },
        parameters = CyberCNS.Schemas.IdentityProvider.Parameters,
        redirect_uri = text
    ],
        
    CyberCNS.Schemas.User.Attributes = type [
        terms_and_conditions = { text },
        includes = { text },
        excludes = { text }
    ],

    CyberCNS.Schemas.User.Access = type [
        manageGroupMembership = logical,
        view = logical,
        mapRoles = logical,
        impersonate = logical,
        manage = logical
    ],

    CyberCNS.Schemas.User.Role.RealmMapping = type [
        id = text,
        name = text,
        description = text,
        composite = logical,
        clientRole = logical,
        containerId = text
    ],

    CyberCNS.Schemas.User.Roles = type [
        realmMappings = { CyberCNS.Schemas.User.Role.RealmMapping }
    ],

    CyberCNS.Schemas.User = type table [
        id = text,
        createdTimestamp = number,                          //TODO: Convert this from timestamp to datetime
        username = text,
        enabled = logical,
        totp = logical,
        emailVerified = logical,
        firstName = text,
        lastName = text,
        email = text,
        attributes = CyberCNS.Schemas.User.Attributes,
        disableableCredentialTypes = list,                  //TODO: Need additional definition
        requiredActions = list,                             //TODO: Need additional definition
        notBefore = number,
        access = CyberCNS.Schemas.User.Access,
        roles = CyberCNS.Schemas.User.Roles
    ],

    CyberCNS.Schemas.Role = type table [
        id = text,
        name = text,
        description = text,
        composite = logical,
        clientRole = logical,
        containerId = text
    ],

    CyberCNS.Schemas.APIClient = type table [
        name = text,
        clientId = text,
        role = text,
        clientSecret = text,
        id = text
    ],

    CyberCNS.Schemas.Reference.CustomReportBuilderRef = type [
        id = text
    ],

    CyberCNS.Schemas.CustomGeneratedReport = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        reportStatus = text,
        reportTitle = text,
        description = text,
        reportPath = text,
        reportDocPath = text,
        siteid = list,
        reason = text,
        customreportbuilderRef = CyberCNS.Schemas.Reference.CustomReportBuilderRef
    ],

    CyberCNS.Schemas.CustomReportBuilder = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        customReportName = text,
        template = text
    ],

    CyberCNS.Schemas.AD.Audit.MembersList = type [
        businessPhones = list,
        displayName = text,
        givenName = text,
        id = text,
        mail = text,
        preferredLanguage = text,
        surname = text,
        userPrincipalName = text
    ],

    CyberCNS.Schemas.AD.Audit = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        AccountDomain = text,
        AccountExpires = text,
        AccountName = text,
        AllowedToDelegateTo = text,
        AppCorrelationID = text,
        AttributeLDAPDisplayName = text,
        AttributeSyntaxOID = text,
        AttributeValue = text,
        CertIssuerName = text,
        CertSerialNumber = text,
        CertThumbprint = text,
        Channel = text,
        ClientAddress = text,
        ClientName = text,
        DSName = text,
        DSType = text,
        Description = text,
        DisplayName = text,
        DnsHostName = text,
        EventDatetime = datetime,
        EventID = text,
        HomeDirectory = text,
        HomePath = text,
        IpAddress = text,
        IpPort = text,
        LogonGuid = text,
        LogonHours = text,
        LogonID = text,
        LogonType = text,
        MemberName = text,
        MemberSid = text,
        NewUacValue = text,
        ObjectClass = text,
        ObjectDN = text,
        ObjectGUID = text,
        OldUacValue = text,
        OpCorrelationID = text,
        OperationType = text,
        PackageName = text,
        PasswordLastSet = text,
        PreAuthType = text,
        PrimaryGroupId = text,
        PrivilegeList = text,
        ProcessId = text,
        ProcessName = text,
        ProfilePath = text,
        SamAccountName = text,
        ScriptPath = text,
        ServiceName = text,
        ServicePrincipalNames = text,
        ServiceSid = text,
        SessionName = text,
        SidHistory = text,
        Status = text,
        SubjectDomainName = text,
        SubjectLogonId = text,
        SubjectUserName = text,
        SubjectUserSid = text,
        TargetDomainName = text,
        TargetInfo = text,
        TargetLogonGuid = text,
        TargetLogonId = text,
        TargetServerName = text,
        TargetSid = text,
        TargetUserName = text,
        TargetUserSid = text,
        TicketEncryptionType = text,
        TicketOptions = text,
        UserAccountControl = text,
        UserParameters = text,
        UserPrincipalName = text,
        UserWorkstations = text,
        Workstation = text,
        accountEnabled = logical,
        browser = text,
        city = text,
        countryOrRegion = text,
        createdDateTime = datetime,
        deviceId = text,
        deviceName = text,
        groupdisplayName = text,
        ipAddress = text,
        latitude = number,
        longitude = number,
        mail = text,
        name = text,
        operatingSystem = text,
        riskDetail = text,
        riskLevelDuringSignIn = text,
        riskState = text,
        securityEnabled = logical,
        source = text,
        state = text,
        uniqueGroupMemberName = text,
        uniqueSignInTime = text,
        userDisplayName = text,
        members = { CyberCNS.Schemas.AD.Audit.MembersList },
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef =  CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.AD.Computer = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        host_name = text,
        dnsHostName = text,
        osname = text,
        OperatingSystemVersion = text,
        distinguishedName = text,
        samAccountName = text,
        enabled = logical,
        lastLogonTimestamp = datetime,
        lastLogonDate = datetime,
        whenCreated = datetime,
        whenModified = datetime,
        lockedOut = logical,
        passwordExpired = logical,
        passwordLastSet = datetime,
        passwordNeverExpires = logical,
        passwordNotRequired = logical,
        domain = text,
        linkedOus = list,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef = CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.AD.GPO = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        displayName = text,
        domain = text,
        gpoModifiedTime = datetime,
        linkedTo = list,
        gpoCreatedTime = datetime,
        guid = text,
        gpoStatus = text,
        path = text,
        name = text,
        linkedOus = list,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef =  CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef =  CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.AD.Group = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        canonicalName = text,
        managedBy = text,
        samAccountName = text,
        domain = text,
        category = text,
        groupCreated = datetime,
        name = text,
        commonName = text,
        distinguishedName = text,
        scope = text,
        isCriticalSystemObj = logical,
        empty = logical,
        members = list,
        linkedOus = list,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef = CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.AD.LinkedGPO = type [
        name = text,
        enabled = logical,
        enforced = logical        
    ],

    CyberCNS.Schemas.AD.OrgUnit = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        managedBy = text,
        domain = text,
        ouName = text,
        empty = logical,
        ouCreated = datetime,
        ouModified = datetime,
        distinguishedName = text,
        guid = text,
        gpLinks = list,
        linkedGPO = { CyberCNS.Schemas.AD.LinkedGPO },
        linkedComputers = list,
        linkedGroups = list,
        linkedUsers = list,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef = CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.AD.User = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        lockedOut = logical,
        emailAddress = text,
        department = text,
        badLogonCount = number,
        passwordNeverExpires = logical,
        passwordExpired = logical,
        passwordNotRequired = logical,
        cannotChangePassword = logical,
        passwordLastSet = datetime,
        name = text,
        passwordExpireDate = datetime,
        whenCreated = datetime,
        whenModified = datetime,
        samAccountName = text,
        linkedOus = list,
        sid = text,
        enabled = logical,
        logonCount = number,
        domain = text,
        accountExpireDate = datetime,
        lastLogonTimestamp = datetime,
        lastLogonDate = datetime,
        memberOf = list,
        office = text,
        displayName = text,
        accountLockoutTime = datetime,
        lastbadPwdAttempt = datetime,
        distinguishedName = text,
        domainAdmin = logical,
        enterpriseAdmin = logical,
        buildInAdmin = logical,
        homeDrive = text,
        homeDirectory = text,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef = CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.Agent = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        version = text,
        host_name = text,
        ostype = number,
        agent_type = number,
        ip = text,
        tags = list,
        lastscannedtime = datetime,
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Service = type [
        serviceName = text,
        applicationName = text
    ],

    CyberCNS.Schemas.ApplicationBaseline = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        #"type" = text,
        os_type = text,
        osname = text,
        mandatoryService = { CyberCNS.Schemas.Service },
        deniedService = { CyberCNS.Schemas.Service },
        mandatoryApplications = { text },
        deniedApplications = { text },
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        isLightWeightMandatory = logical,
        ignoreTags = list,
        includeTags = list
    ],

    CyberCNS.Schemas.Host = type [
        architecture = text,
        cpu_core = number,
        discovered = date,
        host_name = text,
        icon = text,
        status = logical,
        importance = number,
        uniqueId = text,
        serial_number = text,
        ip = text,
        jid = text,
        mac = text,
        manufacturer = text,
        physical_memory = text,
        failed_logins = number,
        uptime = text,
        asset_type = text
    ],

    CyberCNS.Schemas.SNMP = type [
        description = text,
        deviceLocation = text,
        serial = text,
        sysContact = text,
        sysName = text,
        sysObjectId = text,
        communityString = text,
        snmpVersion = text
    ],

    CyberCNS.Schemas.ZeroDay = type [
        name = text,
        vulnerable = logical
    ],

    CyberCNS.Schemas.Security.Evidence = type [
        antiVirus = text,
        localFirewall = text,
        insecureListeningPorts = text,
        failedLogin = text,
        networkVulnerabilities = text,
        systemAging = text,
        supportedOS = text
    ],

    CyberCNS.Schemas.Security.ReportCard = type [
        antiVirus = number,
        localFirewall = number,
        insecureListeningPorts = number,
        failedLogin = number,
        networkVulnerabilities = number,
        systemAging = number,
        supportedOS = number,
        evidence = CyberCNS.Schemas.Security.Evidence
    ],

    CyberCNS.Schemas.Compliance.Evidence = type [
        LLMNR = text,
        NTLMVnumber = text,
        NBTNS = text,
        SMBV1Server = text,
        SMBV1Client = text,
        SMBSigning = text
    ],

    CyberCNS.Schemas.Compliance.ReportCard = type [
        LLMNR = number,
        NTLMVnumber = number,
        NBTNS = number,
        SMBV1Server = number,
        SMBV1Client = number,
        SMBSigning = number,
        evidence = CyberCNS.Schemas.Compliance.Evidence
    ],

    CyberCNS.Schemas.Asset.OS = type [
        build = text,
        product_type = text,
        codename = text,
        full_name = text,
        kernel = text,
        name = text,
        platform = text,
        version = text,
        install_date = number,
        patches = list
    ],
    
    CyberCNS.Schemas.VulnerabilityStats = type [
        risk_score = number,
        base_score = number,
        count_of_critical_network_vuls = number,
        count_of_high_network_vuls = number,
        count_of_medium_network_vuls = number,
        count_of_low_network_vuls = number,
        count_of_info_network_vuls = number,
        count_of_critical_vuls = number,
        count_of_high_vuls = number,
        count_of_medium_vuls = number,
        count_of_low_vuls = number,
        count_of_installed_softwares = number,
        count_of_critical_installed_softwares = number,
        count_of_high_installed_softwares = number,
        count_of_medium_installed_softwares = number,
        count_of_low_installed_softwares = number,
        count_of_open_ports = number,
        ssl_grade = text,
        asset_score = number,
        count_of_critical_network_vuls_new = number,
        count_of_high_network_vuls_new = number,
        count_of_medium_network_vuls_new = number,
        count_of_low_network_vuls_new = number,
        count_of_info_network_vuls_new = number,
        count_of_critical_vuls_new = number,
        count_of_high_vuls_new = number,
        count_of_medium_vuls_new = number,
        count_of_low_vuls_new = number
    ],

    CyberCNS.Schemas.TicketDetails = type [
        ticketId = text,
        integrationName = text,
        integrationId = text
    ],

    CyberCNS.Schemas.AgentRef = type [
        id = text,
        name = text,
        agent_type = number
    ],

    CyberCNS.Schemas.DiscoverySettingsRef = type [
        id = text,
        name = text,
        tags = list
    ],

    CyberCNS.Schemas.Asset = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        ip = text,
        host = CyberCNS.Schemas.Host,
        visibleName = text,
        isExcluded = logical,
        snmp = CyberCNS.Schemas.SNMP,
        zerodayVuls = { CyberCNS.Schemas.ZeroDay },
        security_reportcard = CyberCNS.Schemas.Security.ReportCard,
        compliance_reportcard = CyberCNS.Schemas.Compliance.ReportCard,
        name = text,
        os = CyberCNS.Schemas.Asset.OS,
        credid = text,
        isdeprecated = logical,
        deprecatedtime = datetime,
        snmp_credid = text,
        discoveredProtocols = list,
        vul_stats = CyberCNS.Schemas.VulnerabilityStats,
        ticket_details = CyberCNS.Schemas.TicketDetails,
        lastvul_scannedtime = datetime,
        lastdiscoveredtime = datetime,
        tags = list,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.AgentRef,
        discoverysettingsRef = CyberCNS.Schemas.DiscoverySettingsRef
    ],

    CyberCNS.Schemas.Asset.BestPractice = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        practice_type = text,
        status = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.Credential = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        cred_type = number,
        cred_port = number,
        cred_protocol = text,
        username = text,
        domain = text,
        hostname = text,
        assetid = text,
        name = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.FirewallPolicy = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        policytype = text,
        policystatus = number,
        last_updated = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.RunningProcess = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        port = number,
        address = text,
        protocol = number,
        name = text,
        path = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.Service = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        display_name = text,
        service_status = text,
        path = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.Share = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        anonymous_access = text,
        path = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.TableData = type [
        oid = text,
        value = { text }
    ],

    CyberCNS.Schemas.SNMPTable = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        table_data = { CyberCNS.Schemas.TableData },
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef =CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.SystemInfo = type table [
        _id = text,                                                                 
        c = datetime,                                                               
        u = datetime,                                                               
        tid = text,                                                                 
        bootDevice = text,                                                          
        buildNumber = text,                                                         
        buildType = text,                                                           
        caption = text,                                                             
        codeSet = text,                                                             
        countryCode = text,                                                         
        description = text,                                                         
        installDate = text,                                                         
        lastBootUpTime = text,                                                      
        localDateTime = text,                                                       
        locale = text,                                                              
        manufacturer = text,                                                        
        name = text,                                                                
        organization = text,                                                        
        osArchitecture = text,                                                      
        registeredUser = text,                                                      
        serialNumber = text,                                                        
        Status = text,                                                              
        systemDevice = text,                                                        
        systemDirectory = text,                                                     
        systemDrive = text,                                                         
        version = text,                                                             
        windowsDirectory = text,                                                    
        currentTimezone = number,                                                   
        freePhysicalMemory = number,                                                
        free_spaceInPagingFiles = number,                                           
        freeVirtualMemory = number,                                                 
        maxNumberOfProcesses = number,                                              
        maxProcessMemorySize = number,                                              
        numberOfLicensedUsers = number,                                             
        numberOfProcesses = number,                                                 
        numberOfUsers = number,                                                     
        osType = number,                                                            
        totalSwapSpaceSize = number,                                                
        totalVirtualMemorySize = number,                                            
        totalVisibleMemorySize = number,                                            
        assetRef = CyberCNS.Schemas.Reference.Generic,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.TimeStat = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        vul_stats = CyberCNS.Schemas.VulnerabilityStats,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Asset.User = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        uid = number,
        gid = number,
        username = text,
        description = text,
        directory = text,
        shell = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Company = type table [
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        description = text,
        customerInfo = record,
        isMigrated = logical,
        isAssessment = logical,
        isDeleted = logical,
        deletedTime = datetime,
        source = number,
        tags = list
    ],
    
    CyberCNS.Schemas.Company.Stat = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        company_score = number,
        asset_count = number,
        company_score_assetAvg = number,
        auth_critical = number,
        auth_high = number,
        auth_medium = number,
        auth_low = number,
        auth_total = number,
        network_critical = number,
        network_high = number,
        network_medium = number,
        network_low = number,
        network_info = number,
        network_total = number,
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Company.Stat.TimeSeries = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        company_score = number,
        asset_count = number,
        company_score_assetAvg = number,
        auth_critical = number,
        auth_high = number,
        auth_medium = number,
        auth_low = number,
        auth_total = number,
        network_critical = number,
        network_high = number,
        network_medium = number,
        network_low = number,
        network_info = number,
        network_total = number,
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],


    CyberCNS.Schemas.Benchmarks = type [
        cis = list,
        pci_dss = list,
        tsc = list,
        gdpr_IV = list,
        gpg_13 = list,
        hipaa = list,
        nist_8numbernumber_53 = list,
        cis_8_number = list,
        nist_8numbernumber_171 = list,
        iso_27numbernumber2 = list,
        gpg13 = list
    ],

    CyberCNS.Schemas.Compliance = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        complaince_id = text,
        benchmarks = CyberCNS.Schemas.Benchmarks,
        iscompliant = logical,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Compliance.Check = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        filename = text,
        isApplicable = logical,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.CustomImportSetting = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        insecurePorts = list,
        allowedPorts = list,
        deniedPorts = list,
        excludedPorts = list,
        assetDeprecationDays = number,
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Control = type [ 
        key = text,
        title = text,
        condition = text,
        normal = number,
        risk = number,
        complianceList = list,
        compliance = text,
        dropdown = logical
    ],

    CyberCNS.Schemas.Diagnostic = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        group = text,
        totalRisk = number,
        controls = { CyberCNS.Schemas.Control }
    ],

    CyberCNS.Schemas.DiscoverySetting = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        ip_start = text,
        ip_end = text,
        subnet_mask = text,
        tags = list,
        discovery_type = text,
        isExcluded = logical,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.FSMORole = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        role = text,
        domain = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.InstalledProgram = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        arch = text,
        full_name = text,
        name = text,
        path = text,
        publisher = text,
        install_source = text,
        registery_key = text,
        uninstall_string = text,
        install_date = text,
        identifying_number = text,
        version = text,
        cpe_vendor = text,
        cpe_product = text,
        critical_vuls_count = number,
        high_vuls_count = number,
        medium_vuls_count = number,
        low_vuls_count = number,
        vulcount = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Interface = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        interface = text,
        name = text,
        address = text,
        mask = text,
        broadcast = text,
        mac = text,
        linkspeed = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Reference.AssetRefExt = type [
        id = text,
        name = text,
        ip = text
    ],

    CyberCNS.Schemas.JobStatus = type [ 
        pingStatus = logical,
        topPortsScan = logical,
        vulcount = number,
        risk_score = number,
        base_score = number,
        noauth_vulscount = number,
        status = logical,
        reason = text,
        discoveredProtocol = text,
        ipaddress = text,
        assetRef = CyberCNS.Schemas.Reference.AssetRefExt
    ],

    CyberCNS.Schemas.Inventory_Status = type [ 
        reason = text,
        host = text,
        status = logical
    ],

    CyberCNS.Schemas.Job_Message = type [ 
        assetInventoryStatus = CyberCNS.Schemas.Inventory_Status,
        assetJobStatus = { CyberCNS.Schemas.JobStatus },
        assetSnmpJobStatus = { CyberCNS.Schemas.JobStatus }
    ],

    CyberCNS.Schemas.Job_Data = type [ 
        status_message = text,
        job_status = number,
        message = text,
        job_message = CyberCNS.Schemas.Job_Message,
        assetdescription = text,
        task = text,
        initiated_by = text
    ],

    CyberCNS.Schemas.Job = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        job_data = CyberCNS.Schemas.Job_Data,
        task_id = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Log4JInfo.EnvData = type [
        pid = number,
        key = text,
        value = text
    ],

    CyberCNS.Schemas.Log4JInfo = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        directory = text,
        filename = text,
        cmdline = text,
        version = text,
        isVulnerable = text,
        msgLookup = logical,
        envdata = { CyberCNS.Schemas.Log4JInfo.EnvData },
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Notification.IntegrationRule = type [
        integrationId = text,
        integrationName = text,
        board = text,
        #"type" = text,
        subtype = text,
        item = text,
        status = text,
        status_close = text,
        priority = text,
        toEmail = text,
        fromuser = text,
        replyTo = text,
        isHtml = logical,
        location = text,
        employee = text,
        queues = text
    ],

    CyberCNS.Schemas.Notification.AlertRules.Alert = type [
        ruleId = text,
        eventId = { text }
    ],

    CyberCNS.Schemas.Notification.AlertRules.Section = type [
        sectionId = text,
        rules = { CyberCNS.Schemas.Notification.AlertRules.Alert }
    ],

    CyberCNS.Schemas.Notification.Rule = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        integrationRule = { CyberCNS.Schemas.Notification.IntegrationRule },
        alertRules = { CyberCNS.Schemas.Notification.AlertRules.Section },
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Notification.Ticket = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        integrationName = text,
        integrationId = text,
        ticketStatus = text,
        companyId = text,
        ticketId = text,
        subrule = text,
        eventRef = CyberCNS.Schemas.Reference.Generic,
        alertRef = CyberCNS.Schemas.Reference.Generic,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        notificationrulesRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.PasswordPolicy = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        complexityEnabled = logical,
        distinguishedName = text,
        lockoutDuration = text,
        lockoutObservationWindow = text,
        lockoutThreshold = text,
        maxPasswordAge = number,
        minPasswordAge = number,
        minPasswordLength = number,
        passwordHistoryCount = number,
        reversibleEncryptionEnabled = logical,
        domain = text,
        object_type = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        assetcredentialsRef = CyberCNS.Schemas.Reference.SimpleRef
    ],

    CyberCNS.Schemas.Patching.Response = type [
        name = text,
        msg = text,
        status = logical
    ],

    CyberCNS.Schemas.Patching.Parameters = type [
        // Undefined Object
    ],

    CyberCNS.Schemas.Patching.Status = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        product = text,
        chocoName = text,
        fromVersion = text,
        toVersion = text,
        integrationName = text,
        integrationId = text,
        ticketId = text,
        ticketStatus = text,
        patching_status = number,
        patching_msg = text,
        patching_response = { CyberCNS.Schemas.Patching.Response },
        params = CyberCNS.Schemas.Patching.Parameters,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Port = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        port = number,
        service = text,
        version = text,
        name = text,
        path = text,
        isSecure = logical,
        vulCount = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.RegistryMisconfiguration = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        #"type" = text,
        name = text,
        found = text,
        expected = text,
        ref = text,
        hive = { text },
        assetRef = CyberCNS.Schemas.Reference.Generic,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Remediation.Evidence = type [
        path = text,
        version = text,
        productRef = text
    ],

    CyberCNS.Schemas.Remediation = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        fix = text,
        product = text,
        url = text,
        critical_vuls_count = number,
        high_vuls_count = number,
        medium_vuls_count = number,
        low_vuls_count = number,
        vulcount = number,
        chocoName = text,
        remediatedAt = datetime,
        remediation_type = text,
        remediation_status = logical,
        remediation_closer_reason = text,
        snoozeTill = datetime,
        snoozeReason = text,
        activateReason = text,
        snoozeDays = number,
        evidence = CyberCNS.Schemas.Remediation.Evidence,
        is_mandatory_application = logical,
        is_denied_application = logical,
        is_mandatory_service = logical,
        is_denied_service = logical,
        ticketId = text,
        ticketupdated = logical,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic,
        ruleRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.RemediationSuppression = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        product = text,
        remediation_id = text,
        remediation_type = text,
        version = text,
        remediationdays = number,
        remediatedAt = datetime,
        snoozeDays = number,
        snoozeReason = text,
        snoozeTill = datetime,
        activateReason = text,
        comments = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],
    
    CyberCNS.Schemas.Scheduler.Settings = type [
        mins = list,
        hour = list,
        hours = list,
        days = list,
        week = list,
        months = list,
        weekdays = list
    ],

    CyberCNS.Schemas.Scheduler = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        uniqueid = text,
        agents = list,
        company = list,
        subvalue = list,
        thirdvalue = list,
        settings = CyberCNS.Schemas.Scheduler.Settings,
        scheduler = text,
        isGlobal = logical,
        isActive = logical,
        email = list,
        companyRef = { CyberCNS.Schemas.Reference.Generic },
        agentRef = { CyberCNS.Schemas.Reference.Generic }
    ],

    CyberCNS.Schemas.SecurityCompliance = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        path = text,
        data = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.SMBSharePath = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        path = text,
        permission = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.SNMPv2Credential = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        name = text,
        snmpVersion = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.SNMPv3Credential = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        authProtocol = text,
        securityName = text,
        privacyProtocol = text,
        assetid = text,
        name = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Reference.AssetRefExt2 = type [
        id = text,
        ip = text,
        name = text
    ],

    CyberCNS.Schemas.SSL.Cipher = type [
        kex_info = text,
        name = text,
        strength = text,
        protocol = text
    ],

    CyberCNS.Schemas.SSL.Protocol = type [
        name = text,
        port = number,
        isSecure = logical
    ],

    CyberCNS.Schemas.SSL.Certificate = type [
        issuer_cn = text,
        issued_o = text,
        issuer_c = text,
        issuer_ou = text,
        issued_to = text,
        ext_key_usage = list,
        valid_from = text,
        valid_till = text,
        validity_days = number,
        days_left = number,
        subjectAltNames = list,
        cert_bytes = number,
        cert_type = text,
        verify_cert = logical,
        verify_host = logical,
        public_exponent = number,
        sn = text,
        sha1 = text,
        fingerprint = text,
        ver = number,
        alg = text,
        cert_expired = logical
    ],

    CyberCNS.Schemas.SSL.Port = type [
        port = number,
        service = text,
        version = text,
        name = text,
        path = text,
        vulCount = number,
        isSecure = logical
    ],

    CyberCNS.Schemas.SSLScanTimeSeries = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        ciphers = { CyberCNS.Schemas.SSL.Cipher },
        protocols = { CyberCNS.Schemas.SSL.Protocol },
        additional_certs = { CyberCNS.Schemas.SSL.Certificate },
        sslCert = CyberCNS.Schemas.SSL.Certificate,
        certs_provided = text,
        heartbleed = logical,
        poodle = logical,
        heartbeat = logical,
        freak = logical,
        logjam = logical,
        drown = logical,
        beast = logical,
        grade = text,
        vul_stats = CyberCNS.Schemas.VulnerabilityStats, 
        ports = { CyberCNS.Schemas.SSL.Port },
        uniqueid = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.AssetRefExt2
    ],

    CyberCNS.Schemas.Storage = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        device = text,
        mountpoint = text,
        total = number,
        free = number,
        used = number,
        encrypted = number,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Table.Settings.SortOptions = type [
        active = text,
        direction = text
    ],


    CyberCNS.Schemas.Table.Settings.Settings = type [
        gFilter = list,
        sortOptions = CyberCNS.Schemas.Table.Settings.SortOptions,
        pageSize = number
    ],

    CyberCNS.Schemas.Table.Settings = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        tableId = text,
        columnRepr = text,
        refreshInterval = number,
        userId = text,
        settings = CyberCNS.Schemas.Table.Settings.Settings
    ],

    CyberCNS.Schemas.Vulnerabilities.Score = type [
        base_score = number,
        impact_score = number,
        exploit_score = number,
        cvss_score = number
    ],

    CyberCNS.Schemas.Vulnerabilities.Reference = type [
        id = text,
        name = text,
        productRef = text,
        productVersion = text
    ],

    CyberCNS.Schemas.Vulnerabilities = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        vul_id = text,
        vul_title = text,
        severity = text,
        score = CyberCNS.Schemas.Vulnerabilities.Score,
        product = text,
        url = text,
        chocoName = text,
        remediation_type = text,
        reference = { CyberCNS.Schemas.Vulnerabilities.Reference },
        companyRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Vulnerability = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        vul_id = text,
        product = list,
        category = text,
        title = text,
        severity = text,
        port = number,
        score = CyberCNS.Schemas.Vulnerabilities.Score,
        ref = text,
        uniqueid = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    CyberCNS.Schemas.Vulnerability.TimeSeries = type table [ 
        _id = text,
        c = datetime,
        u = datetime,
        tid = text,
        vul_id = text,
        product = list,
        category = text,
        title = text,
        severity = text,
        port = number,
        score = CyberCNS.Schemas.Vulnerabilities.Score,
        ref = text,
        uniqueid = text,
        companyRef = CyberCNS.Schemas.Reference.Generic,
        agentRef = CyberCNS.Schemas.Reference.Generic,
        assetRef = CyberCNS.Schemas.Reference.Generic
    ],

    SchemaTable = #table({"Entity", "Type"}, {
        { "Alert", CyberCNS.Schemas.Alert },
        { "Event", CyberCNS.Schemas.Event },
        { "IdentityProvider", CyberCNS.Schemas.IdentityProvider },
        { "AvailableIdentityProviders", CyberCNS.Schemas.IdentityProvider },
        { "User", CyberCNS.Schemas.User },
        { "Role", CyberCNS.Schemas.Role },
        { "APIClient", CyberCNS.Schemas.APIClient },
        { "CustomGeneratedReport", CyberCNS.Schemas.CustomGeneratedReport },
        { "CustomReportBuilder", CyberCNS.Schemas.CustomReportBuilder },
        { "AD.Audit", CyberCNS.Schemas.AD.Audit },
        { "AD.Computer", CyberCNS.Schemas.AD.Computer },
        { "AD.GPO", CyberCNS.Schemas.AD.GPO },
        { "AD.Group", CyberCNS.Schemas.AD.Group },
        { "AD.OrgUnit", CyberCNS.Schemas.AD.OrgUnit },
        { "AD.User", CyberCNS.Schemas.AD.User },
        { "Agent", CyberCNS.Schemas.Agent },
        { "ApplicationBaseline", CyberCNS.Schemas.ApplicationBaseline },
        { "Asset", CyberCNS.Schemas.Asset },
        { "Asset.BestPractice", CyberCNS.Schemas.Asset.BestPractice },
        { "Asset.Credential", CyberCNS.Schemas.Asset.Credential },
        { "Asset.FirewallPolicy", CyberCNS.Schemas.Asset.FirewallPolicy },
        { "Asset.RunningProcess", CyberCNS.Schemas.Asset.RunningProcess },
        { "Asset.Service", CyberCNS.Schemas.Asset.Service },
        { "Asset.Share", CyberCNS.Schemas.Asset.Share },
        { "Asset.SNMPTable", CyberCNS.Schemas.SNMPTable },
        { "Asset.SystemInfo", CyberCNS.Schemas.Asset.SystemInfo },
        { "Asset.TimeStat", CyberCNS.Schemas.Asset.TimeStat },
        { "Asset.User", CyberCNS.Schemas.Asset.User },
        { "Company", CyberCNS.Schemas.Company },
        { "Company.Stat", CyberCNS.Schemas.Company.Stat },
        { "Company.Stat.TimeSeries", CyberCNS.Schemas.Company.Stat.TimeSeries },
        { "Compliance", CyberCNS.Schemas.Compliance },
        { "Compliance.Check", CyberCNS.Schemas.Compliance.Check },
        { "CustomImportSetting", CyberCNS.Schemas.CustomImportSetting },
        { "Diagnostic", CyberCNS.Schemas.Diagnostic },
        { "DiscoverySetting", CyberCNS.Schemas.DiscoverySetting },
        { "FSMORole", CyberCNS.Schemas.FSMORole },
        { "InstalledProgram", CyberCNS.Schemas.InstalledProgram },
        { "Interface", CyberCNS.Schemas.Interface },
        { "Job", CyberCNS.Schemas.Job },
        { "Log4JInfo", CyberCNS.Schemas.Log4JInfo },
        { "Notification.Rule", CyberCNS.Schemas.Notification.Rule },
        { "Notification.Ticket", CyberCNS.Schemas.Notification.Ticket },
        { "PasswordPolicy", CyberCNS.Schemas.PasswordPolicy },
        { "PatchingStatus", CyberCNS.Schemas.Patching.Status },
        { "Port", CyberCNS.Schemas.Port },
        { "RegistryMisconfiguration", CyberCNS.Schemas.RegistryMisconfiguration },
        { "Remediation", CyberCNS.Schemas.Remediation },
        { "RemediationSuppression", CyberCNS.Schemas.RemediationSuppression },
        { "Scheduler", CyberCNS.Schemas.Scheduler },
        { "SecurityCompliance", CyberCNS.Schemas.SecurityCompliance },
        { "SMBSharePath", CyberCNS.Schemas.SMBSharePath },
        { "SNMPv2Credential", CyberCNS.Schemas.SNMPv2Credential },
        { "SNMPv3Credential", CyberCNS.Schemas.SNMPv3Credential },
        { "SSLScanTimeSeries", CyberCNS.Schemas.SSLScanTimeSeries },
        { "Storage", CyberCNS.Schemas.Storage },
        { "TableSettings", CyberCNS.Schemas.Table.Settings },
        { "Vulnerabilities", CyberCNS.Schemas.Vulnerabilities },
        { "Vulnerability", CyberCNS.Schemas.Vulnerability },
        { "Vulnerability.TimeSeries", CyberCNS.Schemas.Vulnerability.TimeSeries }
    })
in
    SchemaTable